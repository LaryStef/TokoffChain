name: build-deb

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read version
        id: ver
        shell: bash
        run: |
          VERSION=$(grep -Po '(?<=version = ")[0-9]+\.[0-9]+\.[0-9]+' pyproject.toml)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Prepare minimal DEB structure
        shell: bash
        run: |
          set -e
          # Create package directories
          mkdir -p pkg/DEBIAN
          mkdir -p pkg/opt/tokoffchain
          mkdir -p pkg/usr/bin
          
          # Copy app sources (simple packaging of sources)
          cp -r app pkg/opt/tokoffchain/
          # Optional extras for convenience
          [ -f README.md ] && cp README.md pkg/opt/tokoffchain/ || true
          [ -f pyproject.toml ] && cp pyproject.toml pkg/opt/tokoffchain/ || true
          
          # Create a very simple launcher
          cat > pkg/usr/bin/tokoffchain << 'EOF'
          #!/bin/sh
          set -e
          APP_DIR="/opt/tokoffchain"
          VENV_DIR="$APP_DIR/.venv"

          cd "$APP_DIR"

          # Use virtualenv if present, else fallback to system Python
          if [ -x "$VENV_DIR/bin/python" ]; then
            PY="$VENV_DIR/bin/python"
          else
            PY="$(command -v python3 || true)"
          fi

          if [ -z "$PY" ]; then
            echo "python3 not found. Please install Python 3." >&2
            exit 1
          fi

          exec "$PY" -m app "$@"
          EOF
          chmod +x pkg/usr/bin/tokoffchain

      - name: Export Python requirements with Poetry
        shell: bash
        run: |
          python3 -m pip install --upgrade pip
          # Install Poetry and the export plugin (needed on older Poetry versions)
          python3 -m pip install --upgrade poetry poetry-plugin-export
          poetry --version
          # Try to export requirements. If export is unavailable, write a minimal requirements.txt manually.
          poetry export -f requirements.txt --output pkg/opt/tokoffchain/requirements.txt --without-hashes \
            || {
              echo "Poetry export failed or not available. Falling back to minimal requirements.txt";
              mkdir -p pkg/opt/tokoffchain;
              {
                echo "fastapi[standard]>=0.115.12,<0.116.0";
                echo "pydantic-settings>=2.8.1,<3.0.0";
                echo "sqlalchemy[asyncio]>=2.0.40,<3.0.0";
                echo "asyncpg>=0.30.0,<0.31.0";
                echo "cryptography>=44.0.2,<45.0.0";
              } > pkg/opt/tokoffchain/requirements.txt;
            }

      - name: Create DEBIAN/control
        shell: bash
        run: |
          cat > pkg/DEBIAN/control << EOF
          Package: tokoffchain
          Version: ${{ steps.ver.outputs.version }}
          Section: utils
          Priority: optional
          Architecture: all
          Maintainer: ${{ github.repository_owner }}
          Depends: python3, python3-venv, python3-pip, ca-certificates

      - name: Create DEBIAN/postinst
        shell: bash
        run: |
          cat > pkg/DEBIAN/postinst << 'EOF'
          #!/bin/sh
          set -e

          APP_DIR="/opt/tokoffchain"
          VENV_DIR="$APP_DIR/.venv"
          REQ_FILE="$APP_DIR/requirements.txt"

          case "$1" in
            configure|"")
              if [ ! -x "$VENV_DIR/bin/python" ]; then
                python3 -m venv "$VENV_DIR"
              fi
              "$VENV_DIR/bin/python" -m pip install --upgrade pip
              if [ -f "$REQ_FILE" ]; then
                "$VENV_DIR/bin/pip" install --no-cache-dir -r "$REQ_FILE"
              fi
              ;;
          esac

          #DEBHELPER#
          exit 0
          EOF
          chmod 755 pkg/DEBIAN/postinst

      - name: Build .deb
        shell: bash
        run: |
          DEB_NAME="tokoffchain_${{ steps.ver.outputs.version }}_all.deb"
          dpkg-deb --build pkg "$DEB_NAME"
          echo "deb_name=$DEB_NAME" >> $GITHUB_OUTPUT
        id: build

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.build.outputs.deb_name }}
          path: ${{ steps.build.outputs.deb_name }}
          retention-days: 7